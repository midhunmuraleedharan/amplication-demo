/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLanguageDemoArgs } from "./CreateLanguageDemoArgs";
import { UpdateLanguageDemoArgs } from "./UpdateLanguageDemoArgs";
import { DeleteLanguageDemoArgs } from "./DeleteLanguageDemoArgs";
import { LanguageDemoFindManyArgs } from "./LanguageDemoFindManyArgs";
import { LanguageDemoFindUniqueArgs } from "./LanguageDemoFindUniqueArgs";
import { LanguageDemo } from "./LanguageDemo";
import { LanguageDemoService } from "../languageDemo.service";

@graphql.Resolver(() => LanguageDemo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LanguageDemoResolverBase {
  constructor(
    protected readonly service: LanguageDemoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LanguageDemo",
    action: "read",
    possession: "any",
  })
  async _languageDemosMeta(
    @graphql.Args() args: LanguageDemoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LanguageDemo])
  @nestAccessControl.UseRoles({
    resource: "LanguageDemo",
    action: "read",
    possession: "any",
  })
  async languageDemos(
    @graphql.Args() args: LanguageDemoFindManyArgs
  ): Promise<LanguageDemo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LanguageDemo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LanguageDemo",
    action: "read",
    possession: "own",
  })
  async languageDemo(
    @graphql.Args() args: LanguageDemoFindUniqueArgs
  ): Promise<LanguageDemo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LanguageDemo)
  @nestAccessControl.UseRoles({
    resource: "LanguageDemo",
    action: "create",
    possession: "any",
  })
  async createLanguageDemo(
    @graphql.Args() args: CreateLanguageDemoArgs
  ): Promise<LanguageDemo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LanguageDemo)
  @nestAccessControl.UseRoles({
    resource: "LanguageDemo",
    action: "update",
    possession: "any",
  })
  async updateLanguageDemo(
    @graphql.Args() args: UpdateLanguageDemoArgs
  ): Promise<LanguageDemo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LanguageDemo)
  @nestAccessControl.UseRoles({
    resource: "LanguageDemo",
    action: "delete",
    possession: "any",
  })
  async deleteLanguageDemo(
    @graphql.Args() args: DeleteLanguageDemoArgs
  ): Promise<LanguageDemo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
