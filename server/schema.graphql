# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Language {
  bcp_47LanguageTag: String
  createdAt: DateTime!
  dbValue: Float
  description: String
  id: String!
  languageName: String
  linkedinUrn: Float
  name: String
  region: String
  sortFactor: String
  updatedAt: DateTime!
}

input LanguageCreateInput {
  bcp_47LanguageTag: String
  dbValue: Float
  description: String
  languageName: String
  linkedinUrn: Float
  name: String
  region: String
  sortFactor: String
}

input LanguageOrderByInput {
  bcp_47LanguageTag: SortOrder
  createdAt: SortOrder
  dbValue: SortOrder
  description: SortOrder
  id: SortOrder
  languageName: SortOrder
  linkedinUrn: SortOrder
  name: SortOrder
  region: SortOrder
  sortFactor: SortOrder
  updatedAt: SortOrder
}

input LanguageUpdateInput {
  bcp_47LanguageTag: String
  dbValue: Float
  description: String
  languageName: String
  linkedinUrn: Float
  name: String
  region: String
  sortFactor: String
}

input LanguageWhereInput {
  bcp_47LanguageTag: StringNullableFilter
  dbValue: IntNullableFilter
  description: StringNullableFilter
  id: StringFilter
  languageName: StringNullableFilter
  linkedinUrn: FloatNullableFilter
  name: StringNullableFilter
  region: StringNullableFilter
  sortFactor: StringNullableFilter
}

input LanguageWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createLanguage(data: LanguageCreateInput!): Language!
  createTraitMethod(data: TraitMethodCreateInput!): TraitMethod!
  createUser(data: UserCreateInput!): User!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language!
  deleteTraitMethod(where: TraitMethodWhereUniqueInput!): TraitMethod!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language!
  updateTraitMethod(data: TraitMethodUpdateInput!, where: TraitMethodWhereUniqueInput!): TraitMethod!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _languagesMeta(orderBy: [LanguageOrderByInput!], skip: Float, take: Float, where: LanguageWhereInput): MetaQueryPayload!
  _traitMethodsMeta(orderBy: [TraitMethodOrderByInput!], skip: Float, take: Float, where: TraitMethodWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  language(where: LanguageWhereUniqueInput!): Language
  languages(orderBy: [LanguageOrderByInput!], skip: Float, take: Float, where: LanguageWhereInput): [Language!]!
  traitMethod(where: TraitMethodWhereUniqueInput!): TraitMethod
  traitMethods(orderBy: [TraitMethodOrderByInput!], skip: Float, take: Float, where: TraitMethodWhereInput): [TraitMethod!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type TraitMethod {
  createdAt: DateTime!
  display: String
  id: String!
  method: String
  sortFactor: Float
  totalPoints: Float
  types: JSON
  updatedAt: DateTime!
}

input TraitMethodCreateInput {
  display: String
  method: String
  sortFactor: Float
  totalPoints: Float
  types: JSON
}

input TraitMethodOrderByInput {
  createdAt: SortOrder
  display: SortOrder
  id: SortOrder
  method: SortOrder
  sortFactor: SortOrder
  totalPoints: SortOrder
  types: SortOrder
  updatedAt: SortOrder
}

input TraitMethodUpdateInput {
  display: String
  method: String
  sortFactor: Float
  totalPoints: Float
  types: JSON
}

input TraitMethodWhereInput {
  display: StringNullableFilter
  id: StringFilter
  method: StringNullableFilter
  sortFactor: IntNullableFilter
  totalPoints: IntNullableFilter
  types: JsonFilter
}

input TraitMethodWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
